{
  "name": "C语言字节对齐",
  "tagline": "",
  "body": "C语言字节对齐\r\n===\r\n\r\n\r\n```\r\nC语言字节对齐方式分为自然对齐和强制对齐两种。在结构体的大小的计算中，常会用到字节对齐的知识。\r\n```\r\n\r\n---\r\n\r\n## 自然对齐\r\n### 自然对齐规则\r\n- #### 数据成员对齐规则 \r\n在默认情况下，结构体成员变量的存放起始地址相对于结构体的起始地址的偏移量为sizeof（类型）的倍数。\r\n\r\n- #### 整体对齐规则\r\n结构体总体大小必须为sizeof(最大类型)的整数倍。\r\n\r\n### 自然对齐例子\r\n``` c\r\n\tstruct one\r\n\t{\r\n\t\tchar   a;\r\n\t\tint    b;\r\n\t\tlong   c;\r\n\t\tdouble d;\r\n\t};\r\n```\r\nsizeof(one) = sizeof(char) + 3 + sizeof(int) + sizeof(long) + 4 + sizeof(double) = 24；24为3 * sizeof(double)，满足整体对齐规则。\r\n\r\n## 强制对齐\r\n通过下面指令指定按n字节强制对齐\r\n``` c\r\n\t#pragma pack(n)\t//指定以下代码为n字节对齐\r\n\t···\r\n\t···\r\n\t#pragma pack() \t//恢复默认对齐方式\r\n```\r\n还可以通过下面的方式保存原有的对齐方式\r\n``` c\r\n\t#pragma pack(push) \t//保存现有的对齐方式\r\n\t#pragma pack(n) \t//指定新的对齐方式\r\n\t···\r\n\t···\r\n\t#pragma pack(pop) \t//恢复原来的对齐方式\r\n\t···\r\n\t···\r\n```\r\n### 强制对齐规则\r\n- #### 数据成员对齐规则 \r\n结构体成员变量的存放起始地址相对于结构体的起始地址的偏移量为min{ sizeof（类型）， n }的整数倍。\r\n\r\n- #### 整体对齐规则\r\n结构体总体大小必须为min{ sizeof（类型）， n }的整数倍。\r\n\r\n### 强制对齐例子\r\n``` c\r\n\t#pragma pack(4)\r\n\tstruct two\r\n\t{\r\n\t\tchar   a;\r\n\t\tint    b;\r\n\t\tlong   c;\r\n\t\tdouble d;\r\n\t\tchar   e；\r\n\t};\r\n```\r\n在四字节对齐情况下struct two的大小，\r\n\r\nsizeof(two)= sizeof(char) + 3 + sizeof(int) + sizeof(long) + sizeof(double) +sizeof(e) +  x ；\r\n\r\nsizeof(two) = 21 + x；\r\n\r\n由于sizeof(two)必须是 min {sizeof（double），4 }的整数倍，也就是4的整数倍 ，所以x = 3，故：\r\nsizeof(two) = 24。\r\n\r\n``` c\r\n\t#pragma pack(2)\r\n\tstruct two\r\n\t{\r\n\t\tchar   a;\r\n\t\tint    b;\r\n\t\tlong   c;\r\n\t\tdouble d;\r\n\t\tchar   e；\r\n\t};\r\n```\r\n同样是struct two，如果是按照2字节对齐，则\r\n\r\nsizeof(two) = sizeof(char) + 1 + sizeof(int) + sizeof(long) + sizeof(double) + sizeof(char) + x；\r\n\r\nsizeof(two) = 19 + x;\r\n\r\n由于sizeof(two)必须是min {sizeof(double),  2 }的整数倍，也就是2的整数倍，所以x= 1，故：\r\nsizeof(two) = 20。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}